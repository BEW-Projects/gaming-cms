import mongoose from 'mongoose'
import bcrypt from 'bcrypt'

const MemberSchema = new mongoose.Schema({
    firstName: String,
    lastName: String,
    screenName: String,
    email: String,
    password: String,
    role: String,
    avatar: String,
    status: String,
    lastStatus: Date,
    lastIp: String,
    accountStatus: String,
    statusReason: String,
    statusExpire: Date,
    timezone: String
}, { timestamps: true })

// hash the password before saving member
MemberSchema.pre('save', async () => {
    try {
        // only hash the password if it hasn't been hashed yet
        if(!this.isModified('password')) return
        // hash password with autogenerated salt
        return await this.password = bcrypt.hash(member.password, 10)
    } catch (err) {
        return console.error(err.message)
    }
})

// authenticate member
MemberSchema.statics.authenticate = async (email, password) => {
    try {
        // find our member by email
        let member = await this.findOne( { email: email })
        if (!member) return { reason: "Email not found. Maybe you mistyped something?"}
        // TODO: length should return current time - status expire date
        // TODO: if account status is banned and status has expired, change status to active and continue
        if(member.accountStatus == "banned") return { reason: member.statusReason, length: member.statusExpire}
        let passwordsMatch = await bcrypt.compare(password, member.password)
        if (passwordsMatch) {
            return { member: member }
        } else {
            return { reason: "Invalid Password. Please try again!"}
        }
    } catch (err) {
        return console.error(err.message)
    }
}

module.exports = mongoose.model('Member', MemberSchema)
