import mongoose from 'mongoose'
import bcrypt from 'bcrypt'

const MemberSchema = new mongoose.Schema({
    firstName: String,
    lastName: String,
    screenName: String,
    email: String,
    password: String,
    role: {
        type: String,
        default: 'member'
    },
    avatar: String,
    status: String,
    lastStatus: Date,
    lastIp: String,
    accountStatus: {
        type: String,
        default: 'active'
    },
    statusReason: String,
    statusExpire: Date,
    timezone: String
}, { timestamps: true })

// HASH THE PASSWORD BEFORE SAVING
MemberSchema.pre('save', function(next) {
    var member = this

    // only hash the password if it's new
    if (!this.isModified('password')) return next()

    //hash password with autogenerated salt
    bcrypt.hash(member.password, 10, function(err, hash) {
        if (err) return next(err)
        member.password = hash
        next()
    })
})

// register member
MemberSchema.statics.register = async function(data) {
    try {
        let member = await this.find({ $or : [ {email: data.email}, {screenName: data.screenName}, {lastIp: data.lastIp} ]}).limit(1)
        var reasons = []
        if(member.length < 1) {
            return await this.create(data)
        } else {
            if(member[0].lastIp == data.lastIp && member[0].accountStatus == 'banned') {
                reasons.push(`You already have an account that is currently banned for: '${member[0].statusReason}'. Your account will become active again on: ${member[0].statusExpire.toString()}`)
            } else {
                if(member[0].screenName == data.screenName) {
                    reasons.push(`That Screen Name is already taken!`)
                } else {
                    if(member[0].email == data.email) {
                        reasons.push(`Email already registered! If you have forgotten your password, please contact the administrator.`)
                    } else {
                        return await this.create(data)
                    }
                }
            }
            return { reasons: reasons }
        }
    } catch (err) {
        return console.error(err.message)
    }
}
// authenticate member
MemberSchema.statics.authenticate = async function(email, password) {
    try {
        // find our member by email
        let member = await this.find( { email: email }).limit(1)
        if (member.length < 1) return { reason: "Email not found. Maybe you mistyped something?"}
        // TODO: if account status is banned and status has expired, change status to active and continue
        if(member[0].accountStatus == "banned") return { reason: `Your account is currently banned for: '${member[0].statusReason}'. Your account will become active again on: ${member[0].statusExpire.toString()}` }
        let passwordsMatch = await bcrypt.compare(password, member[0].password)
        if (passwordsMatch) {
            return member[0]
        } else {
            return { reason: "Invalid Password. Please try again!"}
        }
    } catch (err) {
        return console.error(err.message)
    }
}

module.exports = mongoose.model('Member', MemberSchema)
